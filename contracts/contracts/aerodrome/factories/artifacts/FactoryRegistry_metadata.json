{
	"compiler": {
		"version": "0.8.20+commit.a1b79de6"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_fallbackPoolFactory",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_fallbackVotingRewardsFactory",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_fallbackGaugeFactory",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_newManagedRewardsFactory",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"inputs": [],
				"name": "FallbackFactory",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "InvalidFactoriesToPoolFactory",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "PathAlreadyApproved",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "PathNotApproved",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "SameAddress",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "ZeroAddress",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "poolFactory",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "votingRewardsFactory",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "gaugeFactory",
						"type": "address"
					}
				],
				"name": "Approve",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_newRewardsFactory",
						"type": "address"
					}
				],
				"name": "SetManagedRewardsFactory",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "poolFactory",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "votingRewardsFactory",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "gaugeFactory",
						"type": "address"
					}
				],
				"name": "Unapprove",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "poolFactory",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "votingRewardsFactory",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "gaugeFactory",
						"type": "address"
					}
				],
				"name": "approve",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "poolFactory",
						"type": "address"
					}
				],
				"name": "factoriesToPoolFactory",
				"outputs": [
					{
						"internalType": "address",
						"name": "votingRewardsFactory",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "gaugeFactory",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "fallbackPoolFactory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "poolFactory",
						"type": "address"
					}
				],
				"name": "isPoolFactoryApproved",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "managedRewardsFactory",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "poolFactories",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "poolFactoriesLength",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newManagedRewardsFactory",
						"type": "address"
					}
				],
				"name": "setManagedRewardsFactory",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "poolFactory",
						"type": "address"
					}
				],
				"name": "unapprove",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"author": "Carter Carlson (@pegahcarter)",
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"approve(address,address,address)": {
					"details": "Callable by onlyOwner",
					"params": {
						"gaugeFactory": ".",
						"poolFactory": ".",
						"votingRewardsFactory": "."
					}
				},
				"isPoolFactoryApproved(address)": {
					"params": {
						"poolFactory": "."
					},
					"returns": {
						"_0": "True if PoolFactory is approved, else false"
					}
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"poolFactories()": {
					"details": "The same PoolFactory address cannot be used twice",
					"returns": {
						"_0": "Array of PoolFactory addresses"
					}
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setManagedRewardsFactory(address)": {
					"details": "Callable by onlyOwner",
					"params": {
						"_newManagedRewardsFactory": "address of new managedRewardsFactory"
					}
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"unapprove(address)": {
					"details": "Callable by onlyOwner",
					"params": {
						"poolFactory": "."
					}
				}
			},
			"stateVariables": {
				"_factoriesToPoolsFactory": {
					"details": "the factories linked to the poolFactory"
				},
				"_managedRewardsFactory": {
					"details": "factory to create free and locked rewards for a managed veNFT"
				},
				"_poolFactories": {
					"details": "Array of poolFactories used to create a gauge and votingRewards"
				},
				"fallbackPoolFactory": {
					"details": "The protocol will always have a usable poolFactory, votingRewardsFactory, and gaugeFactory.  The votingRewardsFactory"
				}
			},
			"title": "Protocol Factory Registry",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"approve(address,address,address)": {
					"notice": "Approve a set of factories used in the Protocol.         Router.sol is able to swap any poolFactories currently approved.         Cannot approve address(0) factories.         Cannot aprove path that is already approved.         Each poolFactory has one unique set and maintains state.  In the case a poolFactory is unapproved             and then re-approved, the same set of factories must be used.  In other words, you cannot overwrite             the factories tied to a poolFactory address.         VotingRewardsFactories and GaugeFactories may use the same address across multiple poolFactories."
				},
				"factoriesToPoolFactory(address)": {
					"notice": "Get the factories correlated to a poolFactory.         Once set, this can never be modified.         Returns the correlated factories even after an approved poolFactory is unapproved."
				},
				"isPoolFactoryApproved(address)": {
					"notice": "Check if a PoolFactory is approved within the factory registry.  Router uses this method to         ensure a pool swapped from is approved."
				},
				"managedRewardsFactory()": {
					"notice": "Factory to create free and locked rewards for a managed veNFT"
				},
				"poolFactories()": {
					"notice": "Get all PoolFactories approved by the registry"
				},
				"poolFactoriesLength()": {
					"notice": "Get the length of the poolFactories array"
				},
				"setManagedRewardsFactory(address)": {
					"notice": "Set the rewards factory address"
				},
				"unapprove(address)": {
					"notice": "Unapprove a set of factories used in the Protocol.         While a poolFactory is unapproved, Router.sol cannot swap with pools made from the corresponding factory         Can only unapprove an approved path.         Cannot unapprove the fallback path (core v2 factories)."
				}
			},
			"notice": "Protocol Factory Registry to swap and create gauges",
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/aerodrome/factories/FactoryRegistry.sol": "FactoryRegistry"
		},
		"evmVersion": "shanghai",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/structs/EnumerableSet.sol": {
			"keccak256": "0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa",
			"license": "MIT",
			"urls": [
				"bzz-raw://ad85dd393ee0a1917c57046abc5155f51f77844b2c6a42c05c1b8dd26d6ff3c1",
				"dweb:/ipfs/QmNqYc8To2NdnpP6E1tGz7t6A7beuENde5yovwov5pW1fA"
			]
		},
		"contracts/aerodrome/factories/FactoryRegistry.sol": {
			"keccak256": "0x7e9d2a15b674221756a95b54604e09a987250b6c07297282c35ba90c3ac954f0",
			"license": "BUSL-1.1",
			"urls": [
				"bzz-raw://5454df73571cb1547db34a282d8417213a43398ff34d19989a42c3752aeaf56a",
				"dweb:/ipfs/QmNVsufvAza352KUQvjXy6HeQ4yrHC7bYePdREUEpeZZgY"
			]
		},
		"contracts/aerodrome/interfaces/factories/IFactoryRegistry.sol": {
			"keccak256": "0x659c2e30af16e8576a85f58f4c01465fdd36b500854a047fe0f70caaaed0e492",
			"license": "MIT",
			"urls": [
				"bzz-raw://5e5dbc58e4d75bc4508aa65ffec801f9a4a1dc413e7592053342d3dc733f683c",
				"dweb:/ipfs/QmdmYn8TixWkebVncYCqNEYWZA7oRJhXmggWEs1SQ4ouCR"
			]
		}
	},
	"version": 1
}